// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as $$Array from "rescript/lib/es6/array.js";
import * as WebGL from "../Bindings/WebGL.mjs";
import * as Three from "three";
import * as Caml_array from "rescript/lib/es6/caml_array.js";

var scene = [new (Three.Scene)()];

var widthScene = [0];

var heightScene = [0];

var balls = [[]];

var directions = [[]];

function camera(camera$1) {
  return camera$1;
}

var mouse = [{
    x: 0,
    y: 0
  }];

function spheres(width, height) {
  return {
          hd: {
            x: -width / 2 + 100,
            y: height / 2 - 100,
            z: 150,
            r: 160,
            c: "#C1ACD7",
            o: 1.0
          },
          tl: {
            hd: {
              x: -180,
              y: height / 2,
              z: 200,
              r: 100,
              c: "rgb(208,118,130)",
              o: 1.0
            },
            tl: {
              hd: {
                x: width / 2 - 100,
                y: -height / 2 + 100,
                z: 200,
                r: 160,
                c: "rgb(163,224,227)",
                o: 1.0
              },
              tl: {
                hd: {
                  x: 200,
                  y: -height / 2,
                  z: 0,
                  r: 90,
                  c: "rgb(51,88,117)",
                  o: 1.0
                },
                tl: {
                  hd: {
                    x: -width / 2 + 90,
                    y: -200,
                    z: 200,
                    r: 120,
                    c: "rgb(225,195,143)",
                    o: 1.0
                  },
                  tl: {
                    hd: {
                      x: width / 2 - 90,
                      y: 200,
                      z: 200,
                      r: 120,
                      c: "rgb(222,225,170)",
                      o: 1.0
                    },
                    tl: {
                      hd: {
                        x: -200,
                        y: -height / 2 + 80,
                        z: 200,
                        r: 160,
                        c: "rgb(238,238,238)",
                        o: 1.0
                      },
                      tl: {
                        hd: {
                          x: 220,
                          y: -100,
                          z: 200,
                          r: 100,
                          c: "rgb(238,238,238)",
                          o: 1.0
                        },
                        tl: {
                          hd: {
                            x: -50,
                            y: height / 2 - 80,
                            z: -300,
                            r: 120,
                            c: "rgb(238,238,238)",
                            o: 1.0
                          },
                          tl: {
                            hd: {
                              x: 200,
                              y: 250,
                              z: -250,
                              r: 60,
                              c: "rgb(94,194,184)",
                              o: 0.8
                            },
                            tl: {
                              hd: {
                                x: width / 2 - 325,
                                y: height / 2 - 80,
                                z: 200,
                                r: 90,
                                c: "rgb(200,200,200)",
                                o: 1.0
                              },
                              tl: {
                                hd: {
                                  x: width / 2 - 60,
                                  y: -100,
                                  z: -100,
                                  r: 70,
                                  c: "rgb(238,238,238)",
                                  o: 1.0
                                },
                                tl: {
                                  hd: {
                                    x: -width / 2 + 170,
                                    y: -40,
                                    z: -100,
                                    r: 90,
                                    c: "rgb(238,238,238)",
                                    o: 1.0
                                  },
                                  tl: {
                                    hd: {
                                      x: 70,
                                      y: height / 2,
                                      z: 200,
                                      r: 50,
                                      c: "rgb(238,238,238)",
                                      o: 1.0
                                    },
                                    tl: {
                                      hd: {
                                        x: 70,
                                        y: -height / 2 + 70,
                                        z: -250,
                                        r: 35,
                                        c: "rgb(238,238,238)",
                                        o: 1.0
                                      },
                                      tl: {
                                        hd: {
                                          x: -100,
                                          y: -100,
                                          z: -250,
                                          r: 40,
                                          c: "rgb(238,238,238)",
                                          o: 1.0
                                        },
                                        tl: /* [] */0
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
}

function buildBackscene(width, height) {
  var geometry = new (Three.PlaneBufferGeometry)(width * 2, height * 2);
  var params = JSON.parse("{\"color\": \"#469FA3\", \"transparent\": true}");
  var material = new (Three.MeshBasicMaterial)(params);
  var mesh = new (Three.Mesh)(geometry, material);
  mesh.receiveShadow = true;
  mesh.position.z = -300;
  Caml_array.get(scene, 0).add(mesh);
  
}

function buildSphere(width, height) {
  List.map((function (sphere) {
          var geometry = new (Three.SphereGeometry)(sphere.r, 128, 128);
          var setParams = function (color, opacity) {
            return JSON.parse("{\"color\": \"" + ("" + color + ("\", \"transparent\": true, \"opacity\": " + ("" + opacity + "}"))));
          };
          var params = setParams(sphere.c, sphere.o);
          var material = new (Three.MeshLambertMaterial)(params);
          var ball = new (Three.Mesh)(geometry, material);
          ball.position.x = sphere.x;
          ball.position.y = sphere.y;
          ball.position.z = sphere.z;
          Caml_array.get(scene, 0).add(ball);
          Caml_array.set(balls, 0, $$Array.append(Caml_array.get(balls, 0), [ball]));
          var dir = Math.random() < 0.5 ? 1 : -1;
          var vector2 = {
            x: dir,
            y: dir
          };
          return Caml_array.set(directions, 0, $$Array.append(Caml_array.get(directions, 0), [vector2]));
        }), spheres(width, height));
  
}

function buildDirectionalLight(width, height, color) {
  var light = new (Three.DirectionalLight)(color, 0.7);
  light.position.x = 0;
  light.position.y = 0;
  light.position.z = 1000;
  light.shadow.mapSize.width = 1024;
  light.shadow.mapSize.height = 1024;
  light.shadow.camera.left = 300;
  light.shadow.camera.right = 300;
  light.shadow.camera.top = 300;
  light.shadow.camera.bottom = 300;
  light.shadow.camera.far = 1000;
  light.castShadow = true;
  var ambientLight = new (Three.AmbientLight)("#ffffff", 0.6);
  Caml_array.get(scene, 0).add(ambientLight);
  Caml_array.get(scene, 0).add(light);
  
}

function initScene(width, height) {
  Caml_array.set(scene, 0, new (Three.Scene)());
  Caml_array.set(widthScene, 0, 0);
  Caml_array.set(heightScene, 0, 0);
  Caml_array.set(balls, 0, []);
  Caml_array.set(directions, 0, []);
  Caml_array.set(mouse, 0, {
        x: 0,
        y: 0
      });
  buildBackscene(width, height);
  buildSphere(width, height);
  buildDirectionalLight(width, height, "#ffffff");
  Caml_array.set(widthScene, 0, width);
  return Caml_array.set(heightScene, 0, height);
}

function animate(width) {
  for(var index = 0 ,index_finish = Caml_array.get(balls, 0).length; index < index_finish; ++index){
    Caml_array.get(Caml_array.get(balls, 0), index).translateX(Math.random() * Caml_array.get(Caml_array.get(directions, 0), index).x / 2);
    Caml_array.get(Caml_array.get(balls, 0), index).translateY(Math.random() * Caml_array.get(Caml_array.get(directions, 0), index).y / 2);
    if (Math.abs(Caml_array.get(Caml_array.get(balls, 0), index).position.x - Caml_array.get($$Array.of_list(spheres(Caml_array.get(widthScene, 0), Caml_array.get(heightScene, 0))), index).x) > 20) {
      var newDirection_x = Caml_array.get(Caml_array.get(directions, 0), index).x * -1;
      var newDirection_y = Caml_array.get(Caml_array.get(directions, 0), index).y;
      var newDirection = {
        x: newDirection_x,
        y: newDirection_y
      };
      Caml_array.set(Caml_array.get(directions, 0), index, newDirection);
    }
    if (Math.abs(Caml_array.get(Caml_array.get(balls, 0), index).position.y - Caml_array.get($$Array.of_list(spheres(Caml_array.get(widthScene, 0), Caml_array.get(heightScene, 0))), index).y) > 20) {
      var newDirection_x$1 = Caml_array.get(Caml_array.get(directions, 0), index).x;
      var newDirection_y$1 = Caml_array.get(Caml_array.get(directions, 0), index).y * -1;
      var newDirection$1 = {
        x: newDirection_x$1,
        y: newDirection_y$1
      };
      Caml_array.set(Caml_array.get(directions, 0), index, newDirection$1);
    }
    
  }
  var targetAngleX = Caml_array.get(mouse, 0).x * Math.PI / 32 / (Caml_array.get(widthScene, 0) / 2);
  var targetAngleY = Caml_array.get(mouse, 0).y * Math.PI / 16 / (Caml_array.get(widthScene, 0) / 2);
  var element = document.getElementById("webgl-background");
  WebGL.Three.getCamera(element).rotation.x = targetAngleY;
  WebGL.Three.getCamera(element).rotation.y = -targetAngleX;
  
}

function onMouseMove($$event, width, height) {
  return Caml_array.set(mouse, 0, {
              x: WebGL.mouseX($$event) - width / 2,
              y: WebGL.mouseY($$event) - height / 2
            });
}

var BallWorldScene = {
  scene: scene,
  widthScene: widthScene,
  heightScene: heightScene,
  balls: balls,
  directions: directions,
  camera: camera,
  mouse: mouse,
  spheres: spheres,
  buildBackscene: buildBackscene,
  buildSphere: buildSphere,
  buildDirectionalLight: buildDirectionalLight,
  initScene: initScene,
  animate: animate,
  onMouseMove: onMouseMove
};

export {
  BallWorldScene ,
  
}
/*  Not a pure module */
